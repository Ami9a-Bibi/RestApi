@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject JwtAuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage
@using Blazored.LocalStorage

<h3 class="login-title">Log In</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin" class="login-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText @bind-Value="loginModel.Email" id="email" class="form-control" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText @bind-Value="loginModel.Password" InputType="password" id="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Log In</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="error-message">@errorMessage</p>
}
<style>
    .login-title {
        font-size: 2rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 1rem;
        color: #333;
    }

    .login-form {
        max-width: 400px;
        margin: 0 auto;
        padding: 2rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 1rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 1rem;
        box-sizing: border-box;
    }

    .btn {
        display: inline-block;
        width: 100%;
        padding: 0.75rem;
        font-size: 1rem;
        text-align: center;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn:hover {
            background-color: #0056b3;
        }

    .error-message {
        color: red;
        font-size: 0.9rem;
        margin-top: 1rem;
        text-align: center;
    }

</style>
@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await AuthenticationStateProvider.MarkUserAsAuthenticated(result.Token);
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid login credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
}
